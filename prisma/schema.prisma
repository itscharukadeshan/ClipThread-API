generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output = "./client" 
  language = "typescript"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               String      @id @default(uuid())
  twitchId         String?     @unique @default(dbgenerated())
  youtubeId        String?     @unique @default(dbgenerated()) 
  displayName      String?     @default(dbgenerated())
  login            String?     @default(dbgenerated())
  type             String?     @default(dbgenerated())
  broadcasterType  String?     @default(dbgenerated())
  description      String?     @default(dbgenerated())
  profileImageUrl  String?     @default(dbgenerated())
  offlineImageUrl  String?     @default(dbgenerated())
  viewCount        Int?        @default(dbgenerated())
  email            Bytes?      @default(dbgenerated()) 
  createdAt        String?     @default(dbgenerated())
  followers Int?               @default(dbgenerated())
  collections Thread[]        

  twitchAuth TwitchAuth? 
  youtubeAuth YouTubeAuth?
}

model TwitchAuth {
  id            String     @id @default(uuid())
  user   User @relation(fields: [userId], references: [id])
  userId String  @unique
  accessToken  Bytes
  refreshToken Bytes
  expiryTime   String
}

model YouTubeAuth {
  id           String     @id @default(uuid())
  user   User @relation(fields: [userId], references: [id])
  userId String @unique
  accessToken  Bytes 
  refreshToken Bytes
  expiryTime   String
}

model Thread {
  id        String     @id @default(uuid())
  user   Clip @relation(fields: [clipId], references: [id])
  clipId String
  title     String
  url   String
  description String? 
  published Boolean @default(false)
  publishedTime DateTime @default(now())
  author    User?   @relation(fields: [authorId], references: [id]) 
  authorId  String?
}

model Clip {
  id          String     @id @default(uuid())
  description String?    @default(dbgenerated())
  url String
  tags Tag[]
  threads Thread []
}

model Tag {
 id         String     @id @default(uuid())
  name      String  
  topic     Topic?   @relation(fields: [topicId], references: [id])
  topicId   String? 
  clips   Clip[]
}

model Topic {
 id           String     @id @default(uuid())
  category    String
  tags        Tag[]
}
