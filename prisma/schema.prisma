generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  language        = "typescript"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  twitchId        String?      @unique
  youtubeId       String?      @unique
  displayName     String
  login           UserRole
  type            String?
  broadcasterType String?
  description     String?
  profileImageUrl String?
  offlineImageUrl String?
  viewCount       Int?
  email           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  followers       Int?
  collections     Thread?
  twitchAuth      TwitchAuth?
  youtubeAuth     YouTubeAuth?
}

model TwitchAuth {
  userId       String   @id @unique
  accessToken  String
  refreshToken String
  expiryTime   DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model YouTubeAuth {
  userId       String   @id @unique
  accessToken  String
  refreshToken String
  expiryTime   DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Thread {
  id            String   @id @default(cuid())
  clipId        String
  title         String
  url           String
  description   String?
  published     Boolean  @default(false)
  publishedTime DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String?  @unique
  author        User?    @relation(fields: [authorId], references: [id])
  user          Clip     @relation(fields: [clipId], references: [id])
}

model Clip {
  id          String   @id @default(cuid())
  description String?
  url         String
  tagId       String?
  tags        Tag?     @relation(fields: [tagId], references: [id])
  threads     Thread[]
}

model Tag {
  id      String  @id @default(cuid())
  name    String
  topicId String?
  clips   Clip[]
}

enum UserRole {
  user
  moderator
  creator
}
