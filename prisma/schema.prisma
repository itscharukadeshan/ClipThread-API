generator client {
  provider = "prisma-client-js"
  language = "typescript"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(cuid())
  twitchId          String?      @unique
  youtubeId         String?      @unique
  displayName       String
  login             UserRole
  type              String?
  broadcasterType   String?
  description       String?
  profileImageUrl   String?
  offlineImageUrl   String?
  viewCount         Int?
  email             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  followers         Int?
  moderatedChannels String[]     @default([])
  blockedUsers      String[]     @default([])
  blockedTerms      String[]     @default([])
  whitelist         String[]     @default([])
  blacklist         String[]     @default([])
  refreshToken      String       @unique
  collections       Thread?
  twitchAuth        TwitchAuth?  
  youtubeAuth       YouTubeAuth? 
}

model TwitchAuth {
  userId       String   @id @unique
  accessToken  String
  refreshToken String
  expiryTime   DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model YouTubeAuth {
  userId       String   @id @unique
  accessToken  String
  refreshToken String
  expiryTime   DateTime
  user         User     @relation(fields: [userId], references: [id] , onDelete: Cascade)
}

model Thread {
  id            String       @id @default(cuid())
  title         String
  description   String?
  published     Boolean      @default(false)
  publishedTime DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  authorId      String?      @unique
  author        User?        @relation(fields: [authorId], references: [id] , onDelete: Cascade)
  threadClips   ThreadClip[]
}

model Clip {
  id              String       @id @default(cuid())
  clipId          String
  creatorName     String
  creatorId       String
  broadcasterId   String
  broadcasterName String
  gameId          String
  viewCount       Int
  thumbUrl        String
  embedUrl        String
  description     String?
  url             String
  tagId           String?
  tags            Tag?         @relation(fields: [tagId], references: [id])
  threadClips     ThreadClip[]
}

model ThreadClip {
  id       String @id @default(cuid())
  threadId String
  clipId   String
  clip     Clip   @relation(fields: [clipId], references: [id])
  thread   Thread @relation(fields: [threadId], references: [id])
}

model Tag {
  id      String  @id @default(cuid())
  name    String
  topicId String?
  clips   Clip[]
}

model DefaultBadWord {
  words Json @unique
}

model RevokedTokens {
  id String @unique
  expired Boolean @default(false)
}

enum UserRole {
  user
  moderator
  creator
}
